name: Integration Tests

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE*'
      - '.gitignore'
      - '.dockerignore'
      - '*.txt'
      - 'CHANGELOG.md'
      - 'README.md'
      - 'IMPLEMENTATION_STATUS.md'
      - 'CONFIG.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE*'
      - '.gitignore'
      - '.dockerignore'
      - '*.txt'
      - 'CHANGELOG.md'
      - 'README.md'
      - 'IMPLEMENTATION_STATUS.md'
      - 'CONFIG.md'
  schedule:
    # Run integration tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler openssl

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build project
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: cargo build --release

    - name: Run integration tests (including ignored)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: cargo test --test integration_test --verbose -- --include-ignored

    - name: Run TLS integration tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: cargo test --test tls_integration_tests --verbose

    - name: Run TLS cluster tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: cargo test --test tls_cluster_tests --verbose

    - name: Run real cluster integration tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: cargo test --test real_cluster_integration_test --verbose

  cluster-tests:
    name: Cluster Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler openssl netcat-openbsd jq

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build project
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: cargo build --release

    - name: Make test script executable
      run: chmod +x scripts/test-cluster.sh

    - name: Run plain HTTP cluster tests
      run: |
        echo "üöÄ Starting plain HTTP cluster integration tests..."
        ./scripts/test-cluster.sh --ci
      timeout-minutes: 5

    - name: Run TLS cluster tests
      run: |
        echo "üîê Starting TLS cluster integration tests..."
        ./scripts/test-cluster.sh --tls --ci
      timeout-minutes: 5

    - name: Run mTLS cluster tests
      run: |
        echo "üîêüîê Starting mTLS cluster integration tests..."
        ./scripts/test-cluster.sh --mtls --ci
      timeout-minutes: 5

    - name: Cleanup cluster artifacts
      if: always()
      run: |
        echo "üßπ Cleaning up cluster test artifacts..."
        pkill -f ferrium-server || true
        rm -rf test-cluster-automated/ || true
        rm -rf test-cluster/ || true
        rm -f *.log || true
        rm -f *.pem || true
        rm -f *.csr || true

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler openssl netcat-openbsd jq

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build release optimized
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: cargo build --release

    - name: Run performance-related tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Run the large dataset storage test specifically
        cargo test --release test_large_dataset_storage --verbose

    - name: Run plain HTTP cluster performance test
      run: |
        echo "üèÉ‚Äç‚ôÇÔ∏è Running plain HTTP cluster performance tests..."
        chmod +x scripts/test-cluster.sh
        FERRIUM_PERF_TEST=1 ./scripts/test-cluster.sh --ci

    - name: Run TLS cluster performance test
      run: |
        echo "üîêüèÉ‚Äç‚ôÇÔ∏è Running TLS cluster performance tests..."
        FERRIUM_PERF_TEST=1 ./scripts/test-cluster.sh --tls --ci

    - name: Run mTLS cluster performance test
      run: |
        echo "üîêüîêüèÉ‚Äç‚ôÇÔ∏è Running mTLS cluster performance tests..."
        FERRIUM_PERF_TEST=1 ./scripts/test-cluster.sh --mtls --ci

    - name: Cleanup performance test artifacts
      if: always()
      run: |
        pkill -f ferrium-server || true
        rm -rf test-cluster-automated/ || true
        rm -rf test-cluster/ || true
        rm -f *.log || true
        rm -f *.pem || true
        rm -f *.csr || true

  memory-tests:
    name: Memory Safety Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install nightly Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri


    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: nightly-miri

    - name: Run Miri for memory safety checks
      run: |
        # Miri can't run tests that use RocksDB FFI calls
        # Tests using RocksDB are conditionally excluded with #[cfg(not(miri))]
        cargo +nightly miri test --lib -- --test-threads=1
      env:
        MIRIFLAGS: -Zmiri-disable-isolation

